median_income = median_income * runif(n(), 0.9, 1.1)
)
# Calculate lifetime earnings by birth cohort
birth_cohorts <- seq(1945, 1985, 5)
lifetime_earnings <- map_dfr(birth_cohorts, function(birth_year) {
tibble(
birth_year = birth_year,
region = c("East", "West")
) %>%
expand_grid() %>%
rowwise() %>%
mutate(
# Calculate earnings from age 25 to 65
lifetime_earnings = {
career_years <- (birth_year + 25):(birth_year + 65)
career_years <- career_years[career_years >= 1990 & career_years <= 2024]
earnings <- map_dbl(career_years, function(career_year) {
age <- career_year - birth_year
age_group <- case_when(
age <= 34 ~ "25-34",
age <= 44 ~ "35-44",
age <= 54 ~ "45-54",
TRUE ~ "55-64"
)
income_data <- income_by_age_year %>%
filter(year == career_year, age_group == !!age_group, region == !!region)
if(nrow(income_data) > 0) income_data$median_income[1] else 0
})
sum(earnings, na.rm = TRUE)
}
) %>%
ungroup()
})
return(list(
income_by_age_year = income_by_age_year,
lifetime_earnings = lifetime_earnings
))
}
# 3. East/West Wealth Divergence Analysis
reunification_analysis <- function(foundation_data) {
# Define key reunification cohorts by age in 1990
reunification_cohorts <- tibble(
age_in_1990 = c(20, 30, 40, 50, 60),
birth_year = 1990 - age_in_1990,
cohort_label = paste0("Age ", age_in_1990, " in 1990"),
# Career stage in 1990
career_stage = case_when(
age_in_1990 <= 25 ~ "Early Career",
age_in_1990 <= 35 ~ "Career Building",
age_in_1990 <= 45 ~ "Peak Earning",
age_in_1990 <= 55 ~ "Pre-Retirement",
TRUE ~ "Near Retirement"
)
)
# Wealth accumulation simulation post-1990
wealth_simulation <- reunification_cohorts %>%
expand_grid(region = c("East", "West")) %>%
rowwise() %>%
mutate(
# Years of wealth building opportunity post-1990
wealth_building_years = max(0, min(65 - age_in_1990, 2024 - 1990)),
# Starting wealth in 1990 (essentially zero for East Germans)
starting_wealth = ifelse(region == "East", 0, age_in_1990 * 2000),
# Annual wealth accumulation capacity
annual_accumulation = case_when(
career_stage == "Early Career" ~ 2000,
career_stage == "Career Building" ~ 5000,
career_stage == "Peak Earning" ~ 8000,
career_stage == "Pre-Retirement" ~ 6000,
TRUE ~ 2000
),
# Regional multiplier for accumulation
regional_multiplier = ifelse(region == "East", 0.7, 1.0),
# Final wealth estimate
estimated_wealth_2024 = starting_wealth +
(annual_accumulation * regional_multiplier * wealth_building_years),
# Add housing appreciation benefit (more years = more benefit)
housing_appreciation = ifelse(wealth_building_years > 10,
estimated_wealth_2024 * 0.3, 0),
total_estimated_wealth = estimated_wealth_2024 + housing_appreciation
) %>%
ungroup()
return(list(
cohorts = reunification_cohorts,
wealth_simulation = wealth_simulation
))
}
# Plot 1: Housing Price Timeline with Cohort Buying Windows
plot_housing_timeline <- function(housing_analysis) {
# Create buying windows for visualization
buying_windows <- housing_analysis$opportunities %>%
select(cohort_name, prime_buying_start, prime_buying_end, avg_price_during_buying) %>%
pivot_longer(cols = c(prime_buying_start, prime_buying_end),
names_to = "period", values_to = "year") %>%
mutate(period = ifelse(period == "prime_buying_start", "start", "end"))
p1 <- housing_analysis$price_timeline %>%
ggplot(aes(x = year, y = price_index)) +
geom_line(size = 1.2, color = "steelblue") +
geom_area(alpha = 0.3, fill = "steelblue") +
# Add cohort buying windows
geom_rect(data = housing_analysis$opportunities,
aes(xmin = prime_buying_start, xmax = prime_buying_end,
ymin = -Inf, ymax = Inf, fill = cohort_name),
alpha = 0.2, inherit.aes = FALSE) +
# Add major events
geom_vline(xintercept = 1990, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = 2008, linetype = "dashed", color = "orange", size = 1) +
annotate("text", x = 1990, y = 200, label = "German\nReunification",
hjust = -0.1, color = "red", size = 3) +
annotate("text", x = 2008, y = 200, label = "Financial\nCrisis",
hjust = -0.1, color = "orange", size = 3) +
scale_fill_viridis_d(name = "Generation") +
scale_x_continuous(breaks = seq(1970, 2024, 10)) +
scale_y_continuous(labels = scales::number_format()) +
labs(
title = "German House Prices & Generational Buying Windows",
subtitle = "When you were born determined your housing wealth opportunity",
x = "Year",
y = "House Price Index",
caption = "Colored bands show prime buying years (age 25-35) for each generation"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray60"),
legend.position = "bottom"
)
return(p1)
}
# Plot 2: Income Trajectories by Region and Cohort
plot_income_trajectories <- function(income_analysis) {
p2 <- income_analysis$lifetime_earnings %>%
ggplot(aes(x = birth_year, y = lifetime_earnings/1000000,
color = region, fill = region)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
geom_area(alpha = 0.3) +
scale_color_manual(values = c("East" = "#e74c3c", "West" = "#3498db"),
name = "Region") +
scale_fill_manual(values = c("East" = "#e74c3c", "West" = "#3498db"),
name = "Region") +
scale_y_continuous(labels = scales::number_format(suffix = "M €", accuracy = 0.1)) +
scale_x_continuous(breaks = seq(1945, 1985, 5)) +
labs(
title = "Lifetime Earnings by Birth Year & Region",
subtitle = "The East-West gap created lasting wealth disparities",
x = "Birth Year",
y = "Estimated Lifetime Earnings",
caption = "Based on career from age 25-65, adjusted for regional income differences"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray60"),
legend.position = "bottom"
)
return(p2)
}
# Plot 3: Reunification Impact by Age Cohort
plot_reunification_impact <- function(reunification_analysis) {
p3 <- reunification_analysis$wealth_simulation %>%
ggplot(aes(x = age_in_1990, y = total_estimated_wealth/1000,
fill = region)) +
geom_col(position = "dodge", alpha = 0.8) +
scale_fill_manual(values = c("East" = "#e74c3c", "West" = "#3498db"),
name = "Region") +
scale_y_continuous(labels = scales::number_format(suffix = "k €")) +
labs(
title = "Wealth Impact of German Reunification by Age in 1990",
subtitle = "Younger East Germans had more time to catch up, but the gap remains",
x = "Age in 1990",
y = "Estimated Wealth in 2024",
caption = "Simulation based on regional income differences and wealth building time"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray60"),
legend.position = "bottom"
)
return(p3)
}
run_generational_wealth_analysis <- function() {
cat("=== German Generational Wealth Analysis ===\n\n")
# Phase 1: Get foundation data
cat("Phase 1: Retrieving foundation data...\n")
# foundation_data <- get_foundation_data()  # Uncomment when you have API access
foundation_data <- list()  # Placeholder for now
# Phase 2: Run analyses
cat("Phase 2: Running multi-source integration...\n")
housing_results <- housing_wealth_analysis(foundation_data)
income_results <- income_trajectory_analysis(foundation_data)
reunification_results <- reunification_analysis(foundation_data)
# Generate visualizations
cat("Generating visualizations...\n")
plot1 <- plot_housing_timeline(housing_results)
plot2 <- plot_income_trajectories(income_results)
plot3 <- plot_reunification_impact(reunification_results)
# Display results
print(plot1)
print(plot2)
print(plot3)
# Return results for further analysis
return(list(
foundation_data = foundation_data,
housing_analysis = housing_results,
income_analysis = income_results,
reunification_analysis = reunification_results,
plots = list(housing = plot1, income = plot2, reunification = plot3)
))
}
cat("Analysis code ready! \n")
cat("To run: \n")
cat("1. Set up your Destatis credentials with gen_auth_save() \n")
cat("2. Execute: results <- run_generational_wealth_analysis() \n")
run_generational_wealth_analysis
run_generational_wealth_analysis()
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(shinydashboard)
load.package('shinydashboard')
load.packages('shinydashboard')
# Install and load required libraries
required_packages <- c("shiny", "shinydashboard", "DT", "readr", "arrow", "dplyr", "ellmer")
# Install missing packages
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
install.packages(missing_packages)
}
# Load all packages
lapply(required_packages, library, character.only = TRUE)
# Install missing packages
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
install.packages(c("arrow", "askpass", "backports", "bigD", "bigrquery", "bit", "bit64", "bitops", "boot", "brew", "brio", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "clock", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "credentials", "data.table", "DBI", "dbplyr", "desc", "diffobj", "digest", "downlit", "evaluate", "farver", "fastmap", "fontawesome", "foreign", "fs", "generics", "gert", "ggiraph", "ggplot2", "ggrepel", "ggthemes", "gh", "glue", "gt", "gtable", "gtsummary", "highr", "htmltools", "htmlwidgets", "httpuv", "janitor", "jsonlite", "KernSmooth", "knitr", "labelled", "lattice", "lubridate", "markdown", "mgcv", "mime", "miniUI", "nlme", "nnet", "openssl", "openxlsx", "patchwork", "pillar", "pkgbuild", "pkgdown", "pkgload", "processx", "profvis", "progress", "ps", "purrr", "R6", "ragg", "Rcpp", "RcppTOML", "reactR", "readr", "readxl", "remotes", "repr", "reprex", "reticulate", "rlang", "rmarkdown", "roxygen2", "rpart", "rstudioapi", "rvest", "sass", "scales", "sessioninfo", "shiny", "spatial", "stringi", "survival", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "usethis", "utf8", "uuid", "V8", "vroom", "waldo", "withr", "xfun", "xml2", "xopen", "yaml", "zip"))
version('httr2')
install.packages('httr2')
install.packages("httr2")
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
library(shiny); runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
runApp('Library/Mobile Documents/com~apple~CloudDocs/Data analysis/Chat with Data/chat_with_data.R')
# Function to check API status
check_api_status <- function(url) {
response <- GET(url)
status <- status_code(response)
if (status == 200) {
cat("✓ API is accessible\n")
} else {
cat("✗ API returned status code:", status, "\n")
}
return(status)
}
# Function to check API status
check_api_status <- function(url) {
response <- GET(url)
status <- status_code(response)
if (status == 200) {
cat("✓ API is accessible\n")
} else {
cat("✗ API returned status code:", status, "\n")
}
return(status)
}
zurich_datasets <- search_zurich_datasets("energy")
cat("=== END INITIALIZATION ===\n")
rm(list = ls())
library(tidyverse)
library(bigrquery)
library(DBI)
library(reactable)
library(reactablefmtr)
library(gt)
library(gtsummary)
library(arrow)
library(skimr)
library(lubridate)
library(fivethirtyeight)
library(ggthemes)
library(janitor)
# library(crosstalk)
# library(ggiraph)
# library(plotly)
library(openxlsx)
dd_play_raw <- read_parquet(
# "../../../Basics/Get playback session/02_data/output/playback_sessions.gz.parquet"
"../../../Basics/Get playback session/02_data/output/playback_sessions_all_2025-01-16.gz.parquet"
)
# authentication
bq_auth(path = "/Users/thomassie/CH Media/service_accounts_tokens/oneplus-data-prod-8b8db830870a.json")
con_tvnmapping <- dbConnect(
bigrquery::bigquery(),
project = "oneplus-data-prod",
dataset = "create_control_table",
billing = "oneplus-data-prod"
)
bigrquery::dbListTables(con_tvnmapping)
# sql_dd <- dplyr::tbl(con_lovely_playback_session, "playback_session")
sql_dd <- dplyr::tbl(con_tvnmapping, "tvn_mapping")
# define query as string
base_query <- paste0(
"SELECT * FROM `create_control_table.tvn_mapping`"
)
# apply query and download data
dd_tvnmapping_raw <- bq_project_query(
"oneplus-data-prod",
base_query
) %>%
bq_table_download(
n_max = Inf,
page_size = 150
) %>%
collect()
dd_excel_raw <- read.xlsx(
"../02_data/input/250319_CH-Film & Kinostatistik 2024_Formular_ohneViews.xlsx",
sheet = "Abo",
startRow = 6
)
dd_play <- dd_play_raw %>%
# restricting period of time
filter(
between(
load_date,
date("2024-01-01"),
date("2024-12-31")
)
) %>%
clean_names() %>%
# rename(
#   .,
#   c(
#     asset_type = "type",
#   )
# ) %>%
left_join(
dd_tvnmapping_raw,
by = join_by(media_id)
) %>%
mutate(
media_id = as.character(media_id)
)
str(dd_play)
head(dd_play, 20)
dd_play %>%
filter(
is.na(tvn_nummer)
)
# removing all "-01" etc. from `Product_ID`
dd_excel <- dd_excel_raw %>%
mutate(
Produkt_ID = str_remove(Produkt_ID, "-0.*")
)
# selecting only the entries for which TVN number matches the product id from the Excel file
dd_play_selected <- dd_play %>%
filter(
tvn_nummer %in% dd_excel$Produkt_ID
)
dd_play_selected <- dd_play_selected %>%
select(
load_date,
event_timestamp,
household_id,
user_id,
media_id,
tvn_nummer,
household_media,
user_media,
title_name,
watch_time_timestamps,
duration,
subscription
)
dd_play_assets <- dd_play_selected %>%
summarise(
# one cannot group by `title_name`since therae are NULL values contained (!!!)
# .by = c(media_id, title_name),
.by = c(media_id, tvn_nummer),
title_name = min(title_name, na.rm = TRUE),
# asset_views_household = n_distinct(household_media),
asset_views = n_distinct(user_media),
total_watch_time = sum(watch_time_timestamps),
duration_avg = mean(duration),
# duration_min = min(duration),
# duration_max = max(duration)
) %>%
mutate(
times_watched = round(total_watch_time / duration_avg, 1),
) %>%
arrange(
media_id
)
dd_play_assets %>%
head(20)
dd_asset_7days <- dd_play_selected %>%
mutate(
load_date_plus6 = load_date + days(6),
.after = load_date
) %>%
summarise(
.by = c(household_id, user_id, media_id),
asset_views = n_distinct(user_media),
asset_views_1st7days = ifelse(
between(
load_date,
load_date,
load_date_plus6
),
1,
0
),
asset_views_after = ifelse(
between(
load_date,
load_date,
load_date_plus6
),
0,
1
)
) %>%
summarise(
.by = media_id,
num_accounts = n_distinct(household_id),
num_profiles = n_distinct(user_id),
asset_views = sum(asset_views),
asset_views_1st7days = sum(asset_views_1st7days),
asset_views_after = sum(asset_views_after)
)
dd_asset_7days %>%
filter(
asset_views_after != 0
)
reactable(
dd_play_selected %>%
filter(
media_id == 1002917
),
theme = fivethirtyeight(),
defaultPageSize = 20
)
dd_excel <- dd_excel %>%
left_join(
dd_play_assets,
by = join_by("Produkt_ID" == "tvn_nummer")
)
reactable(
(dd_excel %>%
arrange(
-asset_views
)),
sortable = TRUE,
searchable = TRUE,
theme = fivethirtyeight()
)
dd_excel_final <- dd_excel %>%
select(
!c(
media_id,
title_name,
total_watch_time,
duration_avg,
)
) %>%
mutate(
asset_views_1st_7days = asset_views,
.before = asset_views
)
reactable(
(dd_excel_final %>%
arrange(
-asset_views
)),
sortable = TRUE,
searchable = TRUE,
theme = fivethirtyeight()
)
write.xlsx(
dd_excel_final,
"../02_data/output/Filmstatistik 2024.xlsx"
)
dd_play_assets %>%
filter(tvn_nummer = TVN-S001844)
dd_play_assets %>%
filter(tvn_nummer == TVN-S001844)
dd_play_assets %>%
filter(tvn_nummer == "TVN-S001844")
dd_play_assets %>%
filter(tvn_nummer == "TVN-S0018440010")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/R packages/more_colours")
usethis::create_package("~/more_colours")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/R packages/MoreColours")
usethis::create_package("~/MoreColours")
usethis::create_package("/Users/thomassie/Library/Mobile Documents/com~apple~CloudDocs/R packages/MoreColours")
dd_play_assets %>%
filter(tvn_nummer == "TVN-S0018440010")
filter(tvn_nummer %in% c("TVN-S0018440010", "TVN-S0024270006", "TVN-S0024270007") #"TVN-S0018440010")
dd_play_assets %>%
filter(tvn_nummer %in% c("TVN-S0018440010", "TVN-S0024270006", "TVN-S0024270007")) #"TVN-S0018440010")
#dd_play_assets %>%
dd_play_selected %>%
filter(tvn_nummer %in% c("TVN-S0018440010", "TVN-S0024270006", "TVN-S0024270007")) #"TVN-S0018440010")
#dd_play_assets %>%
dd_test <- dd_play_selected %>%
filter(tvn_nummer %in% c("TVN-S0018440010", "TVN-S0024270006", "TVN-S0024270007")) #"TVN-S0018440010")
View(dd_test)
dd_play_assets %>%
# dd_test <- dd_play_selected %>%
filter(tvn_nummer %in% c("TVN-S0018440010", "TVN-S0024270006", "TVN-S0024270007")) #"TVN-S0018440010")
